// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: item.sql

package db

import (
	"context"
)

const deleteItem = `-- name: DeleteItem :exec
delete from item
where id = $1
`

func (q *Queries) DeleteItem(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteItem, id)
	return err
}

const getDataByItem = `-- name: GetDataByItem :many
select
    id, item_id, format, data
from data
where item_id = $1
`

func (q *Queries) GetDataByItem(ctx context.Context, itemID int32) ([]Datum, error) {
	rows, err := q.db.Query(ctx, getDataByItem, itemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Datum
	for rows.Next() {
		var i Datum
		if err := rows.Scan(
			&i.ID,
			&i.ItemID,
			&i.Format,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemByIdAndPerson = `-- name: GetItemByIdAndPerson :one
select
    id, person_id, type, content, created_at
from item
where person_id = $1
    and id = $2
`

type GetItemByIdAndPersonParams struct {
	PersonID int32
	ID       int32
}

func (q *Queries) GetItemByIdAndPerson(ctx context.Context, arg GetItemByIdAndPersonParams) (Item, error) {
	row := q.db.QueryRow(ctx, getItemByIdAndPerson, arg.PersonID, arg.ID)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.PersonID,
		&i.Type,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const getItemsByPerson = `-- name: GetItemsByPerson :many
select
    id, person_id, type, content, created_at
from item
where person_id = $1
`

func (q *Queries) GetItemsByPerson(ctx context.Context, personID int32) ([]Item, error) {
	rows, err := q.db.Query(ctx, getItemsByPerson, personID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.PersonID,
			&i.Type,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertData = `-- name: InsertData :one
insert into data (item_id, format, data)
values ($1, $2, $3) returning id, item_id, format, data
`

type InsertDataParams struct {
	ItemID int32
	Format string
	Data   []byte
}

func (q *Queries) InsertData(ctx context.Context, arg InsertDataParams) (Datum, error) {
	row := q.db.QueryRow(ctx, insertData, arg.ItemID, arg.Format, arg.Data)
	var i Datum
	err := row.Scan(
		&i.ID,
		&i.ItemID,
		&i.Format,
		&i.Data,
	)
	return i, err
}

const insertItem = `-- name: InsertItem :one
insert into item (person_id, content, type)
values ($1, $2, $3) returning id, person_id, type, content, created_at
`

type InsertItemParams struct {
	PersonID int32
	Content  string
	Type     ClipboardType
}

func (q *Queries) InsertItem(ctx context.Context, arg InsertItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, insertItem, arg.PersonID, arg.Content, arg.Type)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.PersonID,
		&i.Type,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}
